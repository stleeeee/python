class Puppy: # 1) Puppy 객체를 만들기 위한 틀

    # 2) 이 클래스는 이런 속성을 가질 거다”라는 선언 및 기본값 느낌
    name = "" # 3) 멤버 변수(필드) : class 안에서 사용 가능한 변수
    goal = ""

    # 4) 새로운 인스턴스가 생성될 때 자동으로 호출되는 함수인, 생성자
    # 9) 이제 puppy는 Puppy 클래스의 한 인스턴스이며, 그 인스턴스는 자신의 name, goal 속성을 가지고 있음.
    def __init__(self, name, goal): # 생성자: 객체화 시 호출되는 함수
        # 5) 받아온 name 과 goal 은 이 생성자를 벗어날 수 없다. (생성자의 쓰임이 다하면 함께 없어진다.)
        # 그래서 클래스(객체) 멤버 에다가 넣어줘야, 객체가 살아있는 동안 사용이 가능하다.
        # 그런데 name = name 형태로는 어떤 것이 init 의 name or class 의 name 인지 구분 불가능.
        # 그래서 멤버인 녀석은 self 를 이용하여 표시해 준다.
        # self 가 없으면 인스턴스 속성에 저장되지 않음. 즉, 객체에 값을 저장하지 못해서 나중에 사용할 수 없음.

        # 6) self.name = 현재 만들어진 인스턴스(객체)안의 변수(속성)
        # 7) name = 매개변수 / 10) 호출 시 전달된 "멍멍이" 값이 여기 임시로 들어옴.
        # 11) 그걸 객체 내부에 있는 self.name에 넣어주는 것. 즉, 저장함.
        self.name = name
        self.goal = goal
        # 12) 이 인스턴스의 name 속성은 "멍멍이" 라는 값을 갖게 됨

puppy = Puppy("멍멍이", "집지키기") # 8) 호출하면 클래스 호출 과정이 시작됨
# Puppy()를 호출하면 새 Puppy 인스턴스가 만들어지고, __init__이 자동으로 호출되어 전달한 인자 "멍멍이"와 "집지키기"로 인스턴스 속성이 초기화된다.
print(f'이름: {puppy.name} / 목적: {puppy.goal}') # 13) 저장이 되어있기 때문에 puppy 라는 변수에 name 을 불러오면 바로 멍멍이가 프린트 된다.